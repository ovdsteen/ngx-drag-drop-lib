import { CUSTOM_MIME_TYPE, DROP_EFFECTS, filterEffects, getWellKnownMimeType, JSON_MIME_TYPE, MSIE_MIME_TYPE, } from './dnd-utils';
const _dndState = {
    isDragging: false,
    dropEffect: 'none',
    effectAllowed: 'all',
    type: undefined,
};
export function startDrag(event, effectAllowed, type) {
    _dndState.isDragging = true;
    _dndState.dropEffect = 'none';
    _dndState.effectAllowed = effectAllowed;
    _dndState.type = type;
    if (event.dataTransfer) {
        event.dataTransfer.effectAllowed = effectAllowed;
    }
}
export function endDrag() {
    _dndState.isDragging = false;
    _dndState.dropEffect = undefined;
    _dndState.effectAllowed = undefined;
    _dndState.type = undefined;
}
export function setDropEffect(event, dropEffect) {
    if (_dndState.isDragging === true) {
        _dndState.dropEffect = dropEffect;
    }
    if (event.dataTransfer) {
        event.dataTransfer.dropEffect = dropEffect;
    }
}
export function getDropEffect(event, effectAllowed) {
    const dataTransferEffectAllowed = event.dataTransfer
        ? event.dataTransfer.effectAllowed
        : 'uninitialized';
    let effects = filterEffects(DROP_EFFECTS, dataTransferEffectAllowed);
    if (_dndState.isDragging === true) {
        effects = filterEffects(effects, _dndState.effectAllowed);
    }
    if (effectAllowed) {
        effects = filterEffects(effects, effectAllowed);
    }
    // MacOS automatically filters dataTransfer.effectAllowed depending on the modifier keys,
    // therefore the following modifier keys will only affect other operating systems.
    if (effects.length === 0) {
        return 'none';
    }
    if (event.ctrlKey && effects.indexOf('copy') !== -1) {
        return 'copy';
    }
    if (event.altKey && effects.indexOf('link') !== -1) {
        return 'link';
    }
    return effects[0];
}
export function getDndType(event) {
    if (_dndState.isDragging === true) {
        return _dndState.type;
    }
    const mimeType = getWellKnownMimeType(event);
    if (mimeType === null) {
        return undefined;
    }
    if (mimeType === MSIE_MIME_TYPE || mimeType === JSON_MIME_TYPE) {
        return undefined;
    }
    return mimeType.substr(CUSTOM_MIME_TYPE.length + 1) || undefined;
}
export function isExternalDrag() {
    return _dndState.isDragging === false;
}
export const dndState = _dndState;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG5kLXN0YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvZG5kL3NyYy9saWIvZG5kLXN0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFDTCxnQkFBZ0IsRUFDaEIsWUFBWSxFQUNaLGFBQWEsRUFDYixvQkFBb0IsRUFDcEIsY0FBYyxFQUNkLGNBQWMsR0FDZixNQUFNLGFBQWEsQ0FBQztBQVNyQixNQUFNLFNBQVMsR0FBYTtJQUMxQixVQUFVLEVBQUUsS0FBSztJQUNqQixVQUFVLEVBQUUsTUFBTTtJQUNsQixhQUFhLEVBQUUsS0FBSztJQUNwQixJQUFJLEVBQUUsU0FBUztDQUNoQixDQUFDO0FBRUYsTUFBTSxVQUFVLFNBQVMsQ0FDdkIsS0FBZ0IsRUFDaEIsYUFBNEIsRUFDNUIsSUFBd0I7SUFFeEIsU0FBUyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUM7SUFDNUIsU0FBUyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUM7SUFDOUIsU0FBUyxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7SUFDeEMsU0FBUyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFFdEIsSUFBSSxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdkIsS0FBSyxDQUFDLFlBQVksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0lBQ25ELENBQUM7QUFDSCxDQUFDO0FBRUQsTUFBTSxVQUFVLE9BQU87SUFDckIsU0FBUyxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUM7SUFDN0IsU0FBUyxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7SUFDakMsU0FBUyxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUM7SUFDcEMsU0FBUyxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7QUFDN0IsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsS0FBZ0IsRUFBRSxVQUFzQjtJQUNwRSxJQUFJLFNBQVMsQ0FBQyxVQUFVLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDbEMsU0FBUyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDcEMsQ0FBQztJQUVELElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3ZCLEtBQUssQ0FBQyxZQUFZLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUM3QyxDQUFDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQzNCLEtBQWdCLEVBQ2hCLGFBQTBDO0lBRTFDLE1BQU0seUJBQXlCLEdBQWtCLEtBQUssQ0FBQyxZQUFZO1FBQ2pFLENBQUMsQ0FBRSxLQUFLLENBQUMsWUFBWSxDQUFDLGFBQStCO1FBQ3JELENBQUMsQ0FBQyxlQUFlLENBQUM7SUFFcEIsSUFBSSxPQUFPLEdBQUcsYUFBYSxDQUFDLFlBQVksRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO0lBRXJFLElBQUksU0FBUyxDQUFDLFVBQVUsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUNsQyxPQUFPLEdBQUcsYUFBYSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsYUFBYyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELElBQUksYUFBYSxFQUFFLENBQUM7UUFDbEIsT0FBTyxHQUFHLGFBQWEsQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELHlGQUF5RjtJQUN6RixrRkFBa0Y7SUFDbEYsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1FBQ3pCLE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3BELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ25ELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQWUsQ0FBQztBQUNsQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxLQUFnQjtJQUN6QyxJQUFJLFNBQVMsQ0FBQyxVQUFVLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDbEMsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxNQUFNLFFBQVEsR0FBRyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUU3QyxJQUFJLFFBQVEsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUN0QixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBSSxRQUFRLEtBQUssY0FBYyxJQUFJLFFBQVEsS0FBSyxjQUFjLEVBQUUsQ0FBQztRQUMvRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQsT0FBTyxRQUFRLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUM7QUFDbkUsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjO0lBQzVCLE9BQU8sU0FBUyxDQUFDLFVBQVUsS0FBSyxLQUFLLENBQUM7QUFDeEMsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBdUIsU0FBK0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERyb3BFZmZlY3QsIEVmZmVjdEFsbG93ZWQgfSBmcm9tICcuL2RuZC10eXBlcyc7XG5pbXBvcnQge1xuICBDVVNUT01fTUlNRV9UWVBFLFxuICBEUk9QX0VGRkVDVFMsXG4gIGZpbHRlckVmZmVjdHMsXG4gIGdldFdlbGxLbm93bk1pbWVUeXBlLFxuICBKU09OX01JTUVfVFlQRSxcbiAgTVNJRV9NSU1FX1RZUEUsXG59IGZyb20gJy4vZG5kLXV0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBEbmRTdGF0ZSB7XG4gIGlzRHJhZ2dpbmc6IGJvb2xlYW47XG4gIGRyb3BFZmZlY3Q/OiBEcm9wRWZmZWN0O1xuICBlZmZlY3RBbGxvd2VkPzogRWZmZWN0QWxsb3dlZDtcbiAgdHlwZT86IHN0cmluZztcbn1cblxuY29uc3QgX2RuZFN0YXRlOiBEbmRTdGF0ZSA9IHtcbiAgaXNEcmFnZ2luZzogZmFsc2UsXG4gIGRyb3BFZmZlY3Q6ICdub25lJyxcbiAgZWZmZWN0QWxsb3dlZDogJ2FsbCcsXG4gIHR5cGU6IHVuZGVmaW5lZCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydERyYWcoXG4gIGV2ZW50OiBEcmFnRXZlbnQsXG4gIGVmZmVjdEFsbG93ZWQ6IEVmZmVjdEFsbG93ZWQsXG4gIHR5cGU6IHN0cmluZyB8IHVuZGVmaW5lZFxuKSB7XG4gIF9kbmRTdGF0ZS5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgX2RuZFN0YXRlLmRyb3BFZmZlY3QgPSAnbm9uZSc7XG4gIF9kbmRTdGF0ZS5lZmZlY3RBbGxvd2VkID0gZWZmZWN0QWxsb3dlZDtcbiAgX2RuZFN0YXRlLnR5cGUgPSB0eXBlO1xuXG4gIGlmIChldmVudC5kYXRhVHJhbnNmZXIpIHtcbiAgICBldmVudC5kYXRhVHJhbnNmZXIuZWZmZWN0QWxsb3dlZCA9IGVmZmVjdEFsbG93ZWQ7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuZERyYWcoKSB7XG4gIF9kbmRTdGF0ZS5pc0RyYWdnaW5nID0gZmFsc2U7XG4gIF9kbmRTdGF0ZS5kcm9wRWZmZWN0ID0gdW5kZWZpbmVkO1xuICBfZG5kU3RhdGUuZWZmZWN0QWxsb3dlZCA9IHVuZGVmaW5lZDtcbiAgX2RuZFN0YXRlLnR5cGUgPSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXREcm9wRWZmZWN0KGV2ZW50OiBEcmFnRXZlbnQsIGRyb3BFZmZlY3Q6IERyb3BFZmZlY3QpIHtcbiAgaWYgKF9kbmRTdGF0ZS5pc0RyYWdnaW5nID09PSB0cnVlKSB7XG4gICAgX2RuZFN0YXRlLmRyb3BFZmZlY3QgPSBkcm9wRWZmZWN0O1xuICB9XG5cbiAgaWYgKGV2ZW50LmRhdGFUcmFuc2Zlcikge1xuICAgIGV2ZW50LmRhdGFUcmFuc2Zlci5kcm9wRWZmZWN0ID0gZHJvcEVmZmVjdDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RHJvcEVmZmVjdChcbiAgZXZlbnQ6IERyYWdFdmVudCxcbiAgZWZmZWN0QWxsb3dlZD86IEVmZmVjdEFsbG93ZWQgfCBEcm9wRWZmZWN0XG4pOiBEcm9wRWZmZWN0IHtcbiAgY29uc3QgZGF0YVRyYW5zZmVyRWZmZWN0QWxsb3dlZDogRWZmZWN0QWxsb3dlZCA9IGV2ZW50LmRhdGFUcmFuc2ZlclxuICAgID8gKGV2ZW50LmRhdGFUcmFuc2Zlci5lZmZlY3RBbGxvd2VkIGFzIEVmZmVjdEFsbG93ZWQpXG4gICAgOiAndW5pbml0aWFsaXplZCc7XG5cbiAgbGV0IGVmZmVjdHMgPSBmaWx0ZXJFZmZlY3RzKERST1BfRUZGRUNUUywgZGF0YVRyYW5zZmVyRWZmZWN0QWxsb3dlZCk7XG5cbiAgaWYgKF9kbmRTdGF0ZS5pc0RyYWdnaW5nID09PSB0cnVlKSB7XG4gICAgZWZmZWN0cyA9IGZpbHRlckVmZmVjdHMoZWZmZWN0cywgX2RuZFN0YXRlLmVmZmVjdEFsbG93ZWQhKTtcbiAgfVxuXG4gIGlmIChlZmZlY3RBbGxvd2VkKSB7XG4gICAgZWZmZWN0cyA9IGZpbHRlckVmZmVjdHMoZWZmZWN0cywgZWZmZWN0QWxsb3dlZCk7XG4gIH1cblxuICAvLyBNYWNPUyBhdXRvbWF0aWNhbGx5IGZpbHRlcnMgZGF0YVRyYW5zZmVyLmVmZmVjdEFsbG93ZWQgZGVwZW5kaW5nIG9uIHRoZSBtb2RpZmllciBrZXlzLFxuICAvLyB0aGVyZWZvcmUgdGhlIGZvbGxvd2luZyBtb2RpZmllciBrZXlzIHdpbGwgb25seSBhZmZlY3Qgb3RoZXIgb3BlcmF0aW5nIHN5c3RlbXMuXG4gIGlmIChlZmZlY3RzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnbm9uZSc7XG4gIH1cblxuICBpZiAoZXZlbnQuY3RybEtleSAmJiBlZmZlY3RzLmluZGV4T2YoJ2NvcHknKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gJ2NvcHknO1xuICB9XG5cbiAgaWYgKGV2ZW50LmFsdEtleSAmJiBlZmZlY3RzLmluZGV4T2YoJ2xpbmsnKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gJ2xpbmsnO1xuICB9XG5cbiAgcmV0dXJuIGVmZmVjdHNbMF0gYXMgRHJvcEVmZmVjdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERuZFR5cGUoZXZlbnQ6IERyYWdFdmVudCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIGlmIChfZG5kU3RhdGUuaXNEcmFnZ2luZyA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBfZG5kU3RhdGUudHlwZTtcbiAgfVxuXG4gIGNvbnN0IG1pbWVUeXBlID0gZ2V0V2VsbEtub3duTWltZVR5cGUoZXZlbnQpO1xuXG4gIGlmIChtaW1lVHlwZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAobWltZVR5cGUgPT09IE1TSUVfTUlNRV9UWVBFIHx8IG1pbWVUeXBlID09PSBKU09OX01JTUVfVFlQRSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4gbWltZVR5cGUuc3Vic3RyKENVU1RPTV9NSU1FX1RZUEUubGVuZ3RoICsgMSkgfHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFeHRlcm5hbERyYWcoKTogYm9vbGVhbiB7XG4gIHJldHVybiBfZG5kU3RhdGUuaXNEcmFnZ2luZyA9PT0gZmFsc2U7XG59XG5cbmV4cG9ydCBjb25zdCBkbmRTdGF0ZTogUmVhZG9ubHk8RG5kU3RhdGU+ID0gX2RuZFN0YXRlIGFzIFJlYWRvbmx5PERuZFN0YXRlPjtcbiJdfQ==